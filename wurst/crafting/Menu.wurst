package Menu
import initlater MenuUnit
import Troll
import HashMap
import PlayerData
import Button

constant BACK_SPELL_ID = 'A003'

public abstract class Action
	abstract function run(Menu menu, Troll crafter, int spellId)

public class Menu
	Menu parent
	// Array to store the buttons
	private Button array[12] buttons
	// Number of Buttons (for iterating)
	private int count = 0
	// 12 possible submenus
	private Menu array[12] subMenus
	// 1 MenuUnit for each player
	private MenuUnit array[12] menuUnit
	private int openedSubMenu = 0
	
	static HashMap<int,Action> actionMap = new HashMap<int,Action>()
	
	function addButton(int xPosition, int yPosition, Button newButton)
		buttons[count] = new Button(x,y,
	
	function addSpellId(int id, Action action)
		if count < 12
			spellIds[count] = id
			actionMap.put(id, action)
			count++
		else
			error("A menu can only have 12 Spells")
			
	function addSubMenu(int index, Menu subMenu)
		subMenus[index] = subMenu
		subMenu.parent = this
		
	function openSubMenu(int index, Troll crafter)
		subMenus[index].displayTo(crafter, true)
		openedSubMenu = index
		
	function closeSubMenu(int pid)
		subMenus[openedSubMenu].hide(pid)
			
	function hide(int pid)
		menuUnit[pid].dummy.hide()
		
		
	function displayTo(Troll t, boolean isSub)
		let id = t.owner.getId()
		
		if menuUnit[id] == null
			menuUnit[id] = new MenuUnit(this, t)
			for i = 0 to count-1
				menuUnit[id].addSpell(spellIds[i])
		else
			menuUnit[id].dummy..setPos(t.pos.toVec2())..show()
			
		if count > 11
			error("Can't add Back Spell")
		else if isSub
			print("added back")
			menuUnit[id].addSpell(BACK_SPELL_ID)
				
		t.owner.selectSingle(menuUnit[id].dummy)
		castTrigger.registerUnitEvent(menuUnit[id].dummy, EVENT_UNIT_SPELL_CAST)
		
	ondestroy
		
		
trigger castTrigger = CreateTrigger()

init
	castTrigger.addAction(() -> begin
		let u = GetTriggerUnit()
		let data = u.getUserData() castTo MenuUnit
		let id = GetSpellAbilityId()
		let troll = u.getOwner().getPData().troll
		Menu.actionMap.get(id).run(data.menu, troll, id)
	end)
	
	Menu.actionMap.put(BACK_SPELL_ID, (Menu menu, Troll crafter, int spellId) -> begin
		menu.parent.closeSubMenu(crafter.owner.getId())
	end)
	
	
